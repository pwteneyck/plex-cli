#! /usr/bin/python3

import argparse
import configparser
import requests
import subprocess
import sys

from fuzzywuzzy import fuzz
from html.parser import HTMLParser
from pathlib import Path

# CONFIGURATION VALUES
# These will change based on the setup of the server/network
# Populated from ~/.plex_conf
PLEX_ADDR = None
PLEX_PORT = None
PLEX_AUTH_TOKEN = None
PLEX_LIBRARY_ID = None

PLEX_URL = None
LIST_MOVIES_URL = None

AUTH_TOKEN_HEADER = 'X-Plex-Token'
FUZZY_SEARCH_THRESHOLD_DEFAULT = 60

def load_config(server_name):
	global PLEX_ADDR
	global PLEX_PORT
	global PLEX_AUTH_TOKEN
	global PLEX_LIBRARY_ID
	global PLEX_URL
	global LIST_MOVIES_URL

	config = configparser.ConfigParser()
	config.read(str(Path.home()) + '/.plex_conf')
	server_config = None

	if server_name is None:
		if len(config.sections()) == 1:
			server_config = config[config.sections()[0]]
		else:
			if 'do-not-use' in config.sections():
				server_config = config['do-not-use']
				print('No server specified despite multiple options. Using default values found in ~/.plex_conf')
			else:
				print(f'Found multiple available servers ({config.sections()}). Either specify one with "--server" or specify a default in ~/.plex_conf')
				sys.exit(1)
	else:
		server_config = config[server_name]

	PLEX_ADDR = server_config['Addr']
	PLEX_PORT = server_config['Port']
	PLEX_AUTH_TOKEN = server_config['AuthToken']
	PLEX_LIBRARY_ID = server_config['LibraryID']

	PLEX_URL = f'http://{PLEX_ADDR}:{PLEX_PORT}'
	LIST_MOVIES_URL = PLEX_URL + f'/library/sections/{PLEX_LIBRARY_ID}/all'


class PlexMediaListHTMLParser(HTMLParser):
	def __init__(self, movie_dict_to_fill):
		self.movie_dict = movie_dict_to_fill
		self.current_title = ''
		super().__init__()

	def handle_starttag(self, tag, attrs):
		if tag == 'video':
			self.current_title = next(filter(lambda attr: attr[0] == 'title', attrs), None)[1]
		elif tag == 'part':
			lib_key = next(filter(lambda attr: attr[0] == 'key', attrs), None)[1]
			self.movie_dict[self.current_title] = lib_key

	def handle_endtag(self, tag):
		if tag == 'Video':
			self.current_title = ''


def search(term, threshold, list_all=False):
	r = requests.get(LIST_MOVIES_URL, params={AUTH_TOKEN_HEADER: PLEX_AUTH_TOKEN})
	movie_dict = {}
	parser = PlexMediaListHTMLParser(movie_dict)
	parser.feed(r.text)

	if list_all:
		return list(movie_dict.items())
	else:
		search_results = {key: value for key, value in movie_dict.items() if fuzz.token_set_ratio(term, key) > threshold }
		return list(search_results.items())

def pick(movie_list):
	for i, movie in enumerate(movie_list):
		print("[{}]: {}".format(i, movie[0]))

	choice = int(input('Selection: '))
	if (choice >= len(movie_list)):
		sys.exit(0)
	return movie_list[int(choice)]

def play(lib_key):
	play_url = PLEX_URL + lib_key + '?' + \
		AUTH_TOKEN_HEADER + '=' + PLEX_AUTH_TOKEN
	subprocess.run(['mpv', play_url])

parser = argparse.ArgumentParser()
parser.add_argument('search', nargs='*')
parser.add_argument('--server', type=str, required=False)
parser.add_argument('--all', action='store_true')
parser.add_argument('-t', '--threshold', default=FUZZY_SEARCH_THRESHOLD_DEFAULT, required=False, type=int)
args = parser.parse_args()

load_config(args.server)

if args.threshold > 99 or args.threshold < 0:
	print('Threshold must be in range [0,99]')
	sys.exit(0)

search_term = ' '.join(args.search)
matched_movies = search(search_term, args.threshold, args.all)
if len(matched_movies) == 0:
	print('No movies found that matched search critiera')
	sys.exit(0)
elif len(matched_movies) == 1:
	print(f'Found one match; autoplaying "{matched_movies[0][0]}"')
	play(matched_movies[0][1])
else:
	selected_match = pick(matched_movies)
	play(selected_match[1])
